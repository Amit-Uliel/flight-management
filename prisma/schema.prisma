// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ** npx prisma migrate dev --name init ** -> first time

// ** npx prisma migrate dev ** -> generates migration files that represent the changes between 
// the current state of your Prisma schema and the state of your database.
// These migration files are stored in your project directory and can be version-controlled.

// ** npx prisma db push ** -> applies the pending migrations directly to the database
// without generating migration files. 
// It's a more streamlined approach for deploying schema 
// changes in production, but it doesn't generate migration files that 
// can be inspected or version-controlled.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
}

model User {
  militaryId String    @id @unique
  password   String
  name String
  role       String
  squadron   Squadron? @relation(fields: [squadronId], references: [squadronId])
  squadronId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Squadron {
  squadronId Int        @id
  users      User[]
  aircrafts  Aircraft[]
}

model Aircraft {
  tailNumber              String                    @id
  model                   AircraftModel
  weight                  Float
  squadron                Squadron                  @relation(fields: [squadronId], references: [squadronId])
  squadronId              Int
  assignments             Assignment[]
  isAvailable             Boolean                   @default(true) // track availability
  AssignmentArmamentUsage AssignmentArmamentUsage[]
}

model Armament {
  armamentType            String                    @id
  weight                  Float
  quantity                Int                       @default(0)
  AssignmentArmamentUsage AssignmentArmamentUsage[]
}

model Camera {
  cameraType String       @id
  weight     Float
  quantity   Int          @default(0)
  Assignment Assignment[]
}

model Mission {
  missionId   Int          @id @default(autoincrement())
  missionName String
  flight      Flight?
  assignments Assignment[]
  MissonStatus MissonStatus @default(ONGOING)
  createdAt   DateTime     @default(now())
}

model Assignment {
  assignmentId                      Int                       @id @default(autoincrement())
  aircraft                Aircraft                  @relation(fields: [tailNumber], references: [tailNumber])
  tailNumber              String
  mission                 Mission                   @relation(fields: [missionId], references: [missionId])
  missionId               Int
  takeOffTime             DateTime
  scheduledLandingTime    DateTime
  actualLandingTime       DateTime?
  status                  AssignmentStatus          @default(ONGOING)
  camera                  Camera                   @relation(fields: [cameraType], references: [cameraType])
  cameraType              String
  AssignmentArmamentUsage AssignmentArmamentUsage[]

  @@unique([tailNumber, missionId])
}

model AssignmentArmamentUsage {
  assignmentArmamentUsageId           Int        @id @default(autoincrement())
  assignment   Assignment @relation(fields: [assignmentId], references: [assignmentId])
  assignmentId Int
  aircraft     Aircraft   @relation(fields: [tailNumber], references: [tailNumber])
  tailNumber   String
  armament     Armament   @relation(fields: [armamentType], references: [armamentType])
  armamentType String
  quantity     Int // Quantity of this specific armament type used by this aircraft in this assignment

  @@unique([assignmentId, tailNumber, armamentType]) // Ensures unique combination of assignment, aircraft, and armament type
}

model Flight {
  flightId             Int          @id @default(autoincrement())
  takeoffTime          DateTime
  scheduledLandingTime DateTime
  actualLandingTime    DateTime?
  status               FlightStatus @default(SCHEDULED)
  notes                String
  mission              Mission      @relation(fields: [missionId], references: [missionId])
  missionId            Int          @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

enum AircraftModel {
  HERMES_450
  HERMES_900
  HERMES_1000
}

enum FlightStatus {
  SCHEDULED // The flight is scheduled for takeoff.
  IN_FLIGHT // The flight is currently in the sky.
  LANDED // The flight has landed.
  COMPLETED // The flight was completed
  CANCELED // The flight was canceled.
}

enum MissonStatus {
  ONGOING
  ONHOLD
  COMPLETED
  CANCELED
}

enum AssignmentStatus {
  ONGOING
  COMPLETED
  CANCELED
}
